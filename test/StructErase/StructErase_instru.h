/* This file auto-generated by KreMLin! */
#ifndef __StructErase_H
#define __StructErase_H

#include "kremlib.h"
#include "nostruct.h"

typedef struct {
  int32_t left;
  int32_t right;
}
StructErase_u;

#ifdef __NOSTRUCT__
#define DECL_BY_VAL_StructErase_u(NAME)   \
  int32_t NAME##_left,			    \
  int32_t NAME##_right
#define DECL_LOCAL_StructErase_u(NAME) \
  int32_t NAME##_left; \
  int32_t NAME##_right
#define LOCAL_TO_STRUCT_StructErase_u(dest, _left, _right) \
  (*(dest)).left = _left; \
  (*(dest)).right  = _right;
#define PASS_LOCAL_StructErase_u(NAME) \
  NAME##_left, \
  NAME##_right
#define ASSIGN_INIT_StructErase_u(NAME, field1, val1, field2, val2) \
  NAME##_##field1 = val1; \
  NAME##_##field2 = val2
#define PASS_BY_COPY_StructErase_u(x) \
  (x).left, \
  (x).right
#else // __NOSTRUCT__
#define STRUCT_INIT_StructErase_u(field1, val1, field2, val2) \
  .field1 = val1, .field2 = val2
#endif // __NOSTRUCT__

void StructErase_f(DECL_BY_VAL(StructErase_u,r), int32_t n);

void StructErase_test();
#endif
